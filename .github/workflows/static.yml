# Build and deploy React app to GitHub Pages
name: Build and Deploy to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build and deploy job
  build-and-deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Clear npm cache
        run: npm cache clean --force
          
      - name: Install dependencies
        run: |
          # Try npm ci first (faster and more reliable for CI)
          npm ci --prefer-offline --no-audit || {
            echo "npm ci failed, falling back to npm install"
            rm -rf node_modules package-lock.json
            npm install --no-package-lock
          }
        
      - name: Build project
        run: npm run build | tee build.log
        
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload dist directory created by build
          path: './dist'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Send Success Email
        if: ${{ always() && success() }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: nikkhiilgupta@gmail.com
          password: ${{ secrets.EMAIL_APP_PASSWORD }}
          subject: "✅ CI/CD Pipeline Status: ${{ job.status }} - ${{ github.repository }} (${{ github.sha }})"
          to: nikhil956839@gmail.com
          cc: nikkhiilgupta@gmail.com
          from: nikkhiilgupta@gmail.com
          body: |
            The CI/CD pipeline for WhatsApp Chat Analyzer has completed successfully!
            
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
            Status: ${{ job.status }}
            
            The application has been deployed to GitHub Pages.
          attachments: |
            build.log
      - name: Send Failure Email
        if: ${{ always() && failure() }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: nikkhiilgupta@gmail.com
          # password: ${{ secrets.EMAIL_APP_PASSWORD }}
          password: "xahg unhw vfbw lhvj"
          subject: "❌ CI/CD Pipeline Status: ${{ job.status }} - ${{ github.repository }} (${{ github.sha }})"
          to: ${{ steps.extract_emails.outputs.authors }}
          cc: nikhil956839@gmail.com
          from: nikkhiilgupta@gmail.com
          body: |
            The CI/CD pipeline status for commit SHA: ${{ github.sha }} in repository ${{ github.repository }} is: ${{ job.status }}.
            Attached are the build logs.
          attachments: |
            build.log
