# Build and deploy React app to GitHub Pages
name: Build and Deploy to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build and deploy job
  build-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Configure npm for reliability
        run: |
          # Set npm registry to use HTTPS and configure timeouts
          npm config set registry https://registry.npmjs.org/
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set fetch-retries 3
          npm config set audit false
          npm config set fund false
          
      - name: Clear npm cache and temp
        run: |
          npm cache clean --force
          rm -rf ~/.npm
          rm -rf /tmp/npm-*
          
      - name: Install dependencies with retry logic
        run: |
          # Function to retry npm commands
          retry_npm() {
            local max_attempts=3
            local delay=5
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts..."
              
              if [ $attempt -eq 1 ]; then
                # First attempt: try npm ci
                npm ci --prefer-offline --no-audit --cache /tmp/empty-cache && return 0
              elif [ $attempt -eq 2 ]; then
                # Second attempt: clean install with fresh package-lock
                rm -rf node_modules package-lock.json
                npm install --no-package-lock --prefer-offline && return 0
              else
                # Final attempt: install without cache, with specific registry
                rm -rf node_modules package-lock.json
                npm install --no-package-lock --registry https://registry.npmjs.org/ && return 0
              fi
              
              echo "Attempt $attempt failed. Waiting ${delay}s before retry..."
              sleep $delay
              delay=$((delay * 2))
              attempt=$((attempt + 1))
            done
            
            echo "All attempts failed"
            return 1
          }
          
          # Create empty cache directory
          mkdir -p /tmp/empty-cache
          
          # Run retry function
          retry_npm
        
      - name: Build project
        run: |
          echo "Starting build process..."
          npm run build 2>&1 | tee build.log
          echo "Build completed with exit code: $?"
          
      - name: Verify build output
        run: |
          if [ ! -d "./dist" ]; then
            echo "Error: dist directory not found!"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
          echo "Build verification successful - dist directory exists"
          echo "Dist directory contents:"
          ls -la ./dist
        
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload dist directory created by build
          path: './dist'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Send Success Email
        if: ${{ always() && success() }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: nikkhiilgupta@gmail.com
          password: ${{ secrets.EMAIL_APP_PASSWORD }}
          subject: "✅ CI/CD Pipeline Status: ${{ job.status }} - ${{ github.repository }} (${{ github.sha }})"
          to: nikhil956839@gmail.com
          cc: nikkhiilgupta@gmail.com
          from: nikkhiilgupta@gmail.com
          body: |
            The CI/CD pipeline for WhatsApp Chat Analyzer has completed successfully!
            
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
            Status: ${{ job.status }}
            
            The application has been deployed to GitHub Pages.
          attachments: |
            build.log
      - name: Send Failure Email
        if: ${{ always() && failure() }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: nikkhiilgupta@gmail.com
          password: ${{ secrets.EMAIL_APP_PASSWORD }}
          subject: "❌ CI/CD Pipeline Status: ${{ job.status }} - ${{ github.repository }} (${{ github.sha }})"
          to: nikhil956839@gmail.com
          cc: nikkhiilgupta@gmail.com
          from: nikkhiilgupta@gmail.com
          body: |
            The CI/CD pipeline for WhatsApp Chat Analyzer has failed!
            
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
            Status: ${{ job.status }}
            
            Please check the build logs for more details.
          attachments: |
            build.log
